[
    {
        "key": "cd8bbac8-89e1-4db9-bcc7-4d89c7f6daaf",
        "severity": "CRITICAL",
        "message": "Rename this constant name to match the regular expression '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
        "line": 51,
        "type": "CODE_SMELL",
        "rule": "java:S115",
        "status": "REOPENED",
        "rule_details": {
            "name": "Constant names should comply with a naming convention",
            "description": "<h3>External coding guidelines</h3>\n<ul>\n  <li> <a href=\"https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names\">The Google Java Style Guide on Constant Names</a>. </li>\n</ul>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name of the constant to match the\nconvention, as well as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages of a\nconstant at once.</p>\n\n<h4>Noncompliant code example</h4>\n<p>The following example assumes that constant names should match the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  public static final float pi = 3.14159f; // Noncompliant: Constant is not capitalized\n\n  void myMethod() {\n    System.out.println(pi);\n  }\n}\n\npublic enum MyEnum {\n  optionOne, // Noncompliant\n  optionTwo; // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  public static final float PI = 3.14159f;\n\n  void myMethod() {\n    System.out.println(PI);\n  }\n}\n\npublic enum MyEnum {\n  OPTION_ONE,\n  OPTION_TWO;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The rule applies to fields of primitive types (for example, <code>float</code>), boxed primitives (<code>Float</code>), and Strings. We do not\napply it to other types, which can be mutated, or have methods with side effects.</p>\n<pre>\npublic static final Logger log = getLogger(MyClass.class);\npublic static final List&lt;Integer&gt; myList = new ArrayList&lt;&gt;();\n\n// call with side-effects\nlog.info(\"message\")\n\n// mutating an object\nmyList.add(28);\n</pre>\n<p>Constants are variables whose value does not change during the runtime of a program after initialization. Oftentimes, constants are used in\nmultiple locations across different subroutines.</p>\n<p>It is important that the names of constants follow a consistent and easily recognizable pattern. This way, readers immediately understand that the\nreferenced value does not change, which simplifies debugging.</p>\n<p>Or, in the case of primitive constants, that accessing the constant is thread-safe.</p>\n<p>This rule checks that all constant names match a given regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Ignoring the naming convention for constants makes the code less readable since constants and variables are harder to tell apart. Code that is hard\nto understand is also difficult to maintain between different team members.</p>\n<p>Constants should be named consistently to communicate intent and improve maintainability. Rename your constants to follow your project’s naming\nconvention to address this issue.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "323b7a6b-44d6-4505-811e-2ca2947bd591",
        "severity": "CRITICAL",
        "message": "Rename this constant name to match the regular expression '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
        "line": 53,
        "type": "CODE_SMELL",
        "rule": "java:S115",
        "status": "OPEN",
        "rule_details": {
            "name": "Constant names should comply with a naming convention",
            "description": "<h3>External coding guidelines</h3>\n<ul>\n  <li> <a href=\"https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names\">The Google Java Style Guide on Constant Names</a>. </li>\n</ul>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name of the constant to match the\nconvention, as well as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages of a\nconstant at once.</p>\n\n<h4>Noncompliant code example</h4>\n<p>The following example assumes that constant names should match the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  public static final float pi = 3.14159f; // Noncompliant: Constant is not capitalized\n\n  void myMethod() {\n    System.out.println(pi);\n  }\n}\n\npublic enum MyEnum {\n  optionOne, // Noncompliant\n  optionTwo; // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  public static final float PI = 3.14159f;\n\n  void myMethod() {\n    System.out.println(PI);\n  }\n}\n\npublic enum MyEnum {\n  OPTION_ONE,\n  OPTION_TWO;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The rule applies to fields of primitive types (for example, <code>float</code>), boxed primitives (<code>Float</code>), and Strings. We do not\napply it to other types, which can be mutated, or have methods with side effects.</p>\n<pre>\npublic static final Logger log = getLogger(MyClass.class);\npublic static final List&lt;Integer&gt; myList = new ArrayList&lt;&gt;();\n\n// call with side-effects\nlog.info(\"message\")\n\n// mutating an object\nmyList.add(28);\n</pre>\n<p>Constants are variables whose value does not change during the runtime of a program after initialization. Oftentimes, constants are used in\nmultiple locations across different subroutines.</p>\n<p>It is important that the names of constants follow a consistent and easily recognizable pattern. This way, readers immediately understand that the\nreferenced value does not change, which simplifies debugging.</p>\n<p>Or, in the case of primitive constants, that accessing the constant is thread-safe.</p>\n<p>This rule checks that all constant names match a given regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Ignoring the naming convention for constants makes the code less readable since constants and variables are harder to tell apart. Code that is hard\nto understand is also difficult to maintain between different team members.</p>\n<p>Constants should be named consistently to communicate intent and improve maintainability. Rename your constants to follow your project’s naming\nconvention to address this issue.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c1f26bb9-976d-452a-a583-be847f8ec61b",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"Franklin\" 6 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 75,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "e7dc8499-65f5-4ad6-9a40-4bc634696180",
        "severity": "MAJOR",
        "message": "Rename \"owners\" which hides the field declared at line 75.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
        "line": 85,
        "type": "CODE_SMELL",
        "rule": "java:S1117",
        "status": "OPEN",
        "rule_details": {
            "name": "Local variables should not shadow class fields",
            "description": "<p>Shadowing occurs when a local variable has the same name as a variable or a field in an outer scope.</p>\n<p>This can lead to three main problems:</p>\n<ul>\n  <li> Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. </li>\n  <li> Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. </li>\n  <li> Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. </li>\n</ul>\n<p>To avoid these problems, rename the shadowing, shadowed, or both identifiers to accurately represent their purpose with unique and meaningful\nnames.</p>\n<p>This rule focuses on variables in methods that shadow a field.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0; // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">DCL51-J. Do not\n  shadow or obscure identifiers in subscopes</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2176'>S2176</a> - Class names should not shadow interfaces or superclasses </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS2387'>S2387</a> - Child class fields should not shadow parent class fields </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS4977'>S4977</a> - Type parameters should not shadow other type parameters </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "4374152b-79ce-4534-93a6-28a13db21caf",
        "severity": "MAJOR",
        "message": "Rename \"owners\" which hides the field declared at line 75.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
        "line": 106,
        "type": "CODE_SMELL",
        "rule": "java:S1117",
        "status": "OPEN",
        "rule_details": {
            "name": "Local variables should not shadow class fields",
            "description": "<p>Shadowing occurs when a local variable has the same name as a variable or a field in an outer scope.</p>\n<p>This can lead to three main problems:</p>\n<ul>\n  <li> Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. </li>\n  <li> Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. </li>\n  <li> Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. </li>\n</ul>\n<p>To avoid these problems, rename the shadowing, shadowed, or both identifiers to accurately represent their purpose with unique and meaningful\nnames.</p>\n<p>This rule focuses on variables in methods that shadow a field.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0; // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">DCL51-J. Do not\n  shadow or obscure identifiers in subscopes</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2176'>S2176</a> - Class names should not shadow interfaces or superclasses </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS2387'>S2387</a> - Child class fields should not shadow parent class fields </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS4977'>S4977</a> - Type parameters should not shadow other type parameters </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "f22669c0-79ce-48e2-92b2-2f3a5097a2b0",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"Schultz\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
        "line": 106,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3b43da38-dca5-420f-b862-f7be508a2963",
        "severity": "MINOR",
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"owner\".",
        "component": "spring-petclinic:src/main/java/org/springframework/samples/petclinic/owner/PetController.java",
        "line": 63,
        "type": "CODE_SMELL",
        "rule": "java:S1488",
        "status": "OPEN",
        "rule_details": {
            "name": "Local variables should not be declared and then immediately returned or thrown",
            "description": "<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. To fix\nthe issue, return or throw the value directly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds) * 1000;\n  return duration;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds) * 1000;\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>\n<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. This\npractice can make the code harder to read and understand, as it introduces an extra step that doesn’t add any value. Instead of declaring a variable\nand then immediately returning or throwing it, it is generally better to return or throw the value directly. This makes the code cleaner, simpler, and\neasier to understand.</p>",
            "rule_severity": "MINOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "95ac26fb-5256-4391-950a-bc9f72629b4c",
        "severity": "MAJOR",
        "message": "Bind this resource's automounted service account to RBAC or disable automounting.",
        "component": "spring-petclinic:k8s/db.yml",
        "line": 43,
        "type": "VULNERABILITY",
        "rule": "kubernetes:S6865",
        "status": "OPEN",
        "rule_details": {
            "name": "Service account permissions should be restricted",
            "description": "<h4>Noncompliant code example</h4>\n<p>In this example, the service account token is mounted in the pod <code>example-pod</code> by default, but is unnecessary for the pod and its\nservice(s) to function correctly.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec: # Noncompliant\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<p>In this example, the service account token is mounted in the pod <code>example-pod</code> and is necessary, for example because it allows a\nthird-party service to authenticate with the Kubernetes API. However, no specific permissions are granted to the service account:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  serviceAccountName: example-sa # Noncompliant\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  containers:\n  - name: example-container\n    image: nginx\n  automountServiceAccountToken: false\n</pre>\n<p>In the following example, Role bindings are created, but Cluster Role Bindings would be more appropriate if the service account is intended to be\nused across multiple namespaces:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: example-sa\n  namespace: default\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: example-role-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  namespace: default\nspec:\n  serviceAccountName: example-sa\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>The essential part of the solution is to make sure that permissions within the cluster are constructed in a way that minimizes the risk of\nunauthorized access.</p>\n<p>To do so, it follows a least-privilege approach.</p>\n<ol>\n  <li> If the service account token is unnecessary for the pod to function, disable automounting. </li>\n  <li> If the service account token is required, ensure that the service account has the least amount of permissions necessary to perform its\n  function. </li>\n</ol>\n<p>Additionally, service account token automounting can be disabled directly from the service account specification file.</p>\n<p>Service account tokens are Kubernetes secrets to authenticate applications running inside pods to the API server. If a pod is compromised, an\nattacker could use this token to gain access to other resources in the cluster.</p>\n<p>For example, they could create new pods, modify existing ones, or even delete critical system pods, depending on the permissions associated with\nthe service account.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unauthorized Access</h4>\n<p>If a pod with a mounted service account gets compromised, an attacker could potentially use the token to interact with the Kubernetes API, possibly\nleading to unauthorized access to other resources in the cluster.</p>\n<h4>Privilege Escalation</h4>\n<p>Service account tokens are often bound with roles that have extensive permissions. If these tokens are exposed, it could lead to privilege\nescalation where an attacker gains higher-level permissions than intended.</p>\n<h4>Data Breach</h4>\n<p>Service account tokens can be used to access sensitive data stored in the Kubernetes cluster. If these tokens are compromised, it could lead to a\ndata breach.</p>\n<h4>Denial of Service</h4>\n<p>An attacker with access to a service account token could potentially overload the Kubernetes API server by sending a large number of requests,\nleading to a Denial of Service (DoS) attack.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\">Configure Service\n  Accounts for Pods</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/306\">CWE-306 - Missing Authentication for Critical Function</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "VULNERABILITY",
            "rule_status": "READY"
        }
    },
    {
        "key": "3d5ec6ce-e4e7-4d8a-92df-6b69e9d008a5",
        "severity": "MAJOR",
        "message": "Specify a storage request for this container.",
        "component": "spring-petclinic:k8s/db.yml",
        "line": 44,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6897",
        "status": "OPEN",
        "rule_details": {
            "name": "Storage requests should be specified",
            "description": "<p>To avoid potential issues, specify a storage request for each container using ephemeral storage with\n<code>resources.requests.ephemeral-storage</code>, or create a <code>LimitRange</code> resource, that sets a default storage request for all\ncontainers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          ephemeral-storage: \"2Gi\"\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: storage-limit-range\n  namespace: namespace-with-limit-range\nspec:\n  limits:\n  - defaultRequest:\n      ephemeral-storage: \"10Mi\"\n    type: Container\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: namespace-with-limit-range\nspec:\n  containers:\n    - name: web\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<h3>How does this work?</h3>\n<p>You can set a request through the property <code>resources.requests.ephemeral-storage</code> of a container. Alternatively, you can set a default\nrequest for a namespace with <code>LimitRange</code> through <code>spec.limits[].defaultRequest.ephemeral-storage</code>.</p>\n<p>Ephemeral storage is a type of storage that is temporary and non-persistent, meaning it does not retain data once the process is terminated. In the\ncontext of Kubernetes, ephemeral storage is used for storing temporary files that a running container can write and read.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a\n  href=\"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#setting-requests-and-limits-for-local-ephemeral-storage\">Setting requests and limits for local ephemeral storage</a> </li>\n</ul>\n<p>Without a storage request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Kubernetes doesn’t know how much of a particular resource to allocate to a container without defined requests. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. This can lead to system instability, and in extreme cases, the node might crash, causing downtime for all containers running on\nthat node.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "be91d223-55f8-4cd6-8919-894e0297b601",
        "severity": "MAJOR",
        "message": "Specify a memory request for this container.",
        "component": "spring-petclinic:k8s/db.yml",
        "line": 44,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6873",
        "status": "OPEN",
        "rule_details": {
            "name": "Memory requests should be specified",
            "description": "<p>A memory request is a configuration that sets the guaranteed amount of memory that a container will be able to use. It is part of the resource\nmanagement functionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a memory request is set for a container, Kubernetes will only schedule it on a node that can give it that resource, thereby guaranteeing that\nthe container can use the specified requested memory.</p>\n<p>Without a memory request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Without defined requests, Kubernetes doesn’t know how much of a particular resource to allocate to a container. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. This can lead to system instability, and in extreme cases, the node might crash, causing downtime for all containers running on\nthat node.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\">Configure\n  Default Memory Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google Cloud Blog - <a\n  href=\"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\">Kubernetes best\n  practices: Resource requests and limits</a> </li>\n</ul>\n<p>To avoid potential issues, either specify a memory request for each container in a pod specification or create a resource of a kind,\n<code>LimitRange</code>, that sets a default memory request for all containers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          memory: 100Mi\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\n  namespace: default-mem-example\nspec:\n  limits:\n    - type: Container\n      defaultRequest:\n        memory: 100Mi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: default-mem-example\nspec:\n  containers:\n    - name: web\n      image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A request can be set through the property <code>resources.requests.memory</code> of a container. Alternatively, a default request for a namespace\ncan be set with <code>LimitRange</code> through <code>spec.limits[].defaultRequest.memory</code>.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "db310c48-5646-4d40-884e-417de7a209d4",
        "severity": "MAJOR",
        "message": "Specify a CPU request for this container.",
        "component": "spring-petclinic:k8s/db.yml",
        "line": 44,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6892",
        "status": "OPEN",
        "rule_details": {
            "name": "CPU requests should be specified",
            "description": "<p>Without a CPU request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Without defined requests, Kubernetes doesn’t know how much of a particular resource to allocate to a container. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. In this case, Kubernetes may throttle its CPU usage. By setting a CPU request, Kubernetes will make sure that the container will\nget the requested CPU.</p>\n<p>To avoid potential issues, either specify a CPU request for each container with <code>resources.requests.cpu</code> or create a resource of a kind\n<code>LimitRange</code> that sets a default CPU request for all containers in all pod specifications in a namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          cpu: 0.5\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: cpu-request-range\n  namespace: default-cpu-example\nspec:\n  limits:\n  - defaultRequest:\n      cpu: 0.5\n    type: Container\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-ns-compliant\n  namespace: default-cpu-example\nspec:\n  containers:\n  - name: nginx-ns-compliant\n    image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A request can be set through the property <code>resources.requests.cpu</code> of a container. Alternatively, a default request for a namespace can\nbe set with <code>LimitRange</code> through the property <code>spec.limits[].defaultRequest.cpu</code>.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/\">Configure\n  Default CPU Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google Cloud Blog - <a\n  href=\"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\">Kubernetes best\n  practices: Resource requests and limits</a> </li>\n</ul>\n<p>A CPU request is a configuration that sets the guaranteed amount of CPU cores that a container will be able to use. It is part of the resource\nmanagement functionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a CPU request is set for a container, Kubernetes will only schedule it on a node that can give it that resource, thereby guaranteeing that the\ncontainer can use the specified requested CPU cores.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "f83e8194-d89f-4f2a-b49a-50e3338b48e7",
        "severity": "MAJOR",
        "message": "Specify a memory limit for this container.",
        "component": "spring-petclinic:k8s/db.yml",
        "line": 44,
        "type": "VULNERABILITY",
        "rule": "kubernetes:S6864",
        "status": "OPEN",
        "rule_details": {
            "name": "Memory limits should be enforced",
            "description": "<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\">Configure\n  Default Memory Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/770\">CWE-770 - Allocation of Resources Without Limits or Throttling</a> </li>\n</ul>\n<p>To avoid potential issues, either specify a memory limit for each container in a pod specification or create a resource of a kind\n<code>LimitRange</code>, that sets a default memory limit for all containers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        limits:\n          memory: 100Mi\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\n  namespace: default-mem-example\nspec:\n  limits:\n    - type: Container\n      default:\n        memory: 100Mi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: default-mem-example\nspec:\n  containers:\n    - name: web\n      image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A limit can be set through the property <code>resources.limits.memory</code> of a container. Alternatively, a default limit for a namespace can be\nset with <code>LimitRange</code> through <code>spec.limits[].default.memory</code>.</p>\n<p>A memory limit is a configuration that sets the maximum amount of memory that a container can use. It is part of the resource management\nfunctionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a memory limit is set for a container, Kubernetes ensures that the container does not exceed the specified limit. If a container tries to use\nmore memory than its limit, the system will reclaim the excess memory, which could lead to termination of processes within the container.</p>\n<p>Without a memory limit, a container can potentially consume all available memory on a node, which can lead to unpredictable behavior of the\ncontainer or the node itself. Therefore, defining a memory limit for each container is a best practice in Kubernetes configurations. It helps in\nmanaging resources effectively and ensures that a single container does not monopolize the memory resources of a node.</p>\n<h3>What is the potential impact?</h3>\n<h4>Denial of Service</h4>\n<p>Without a memory limit, a container can consume all available memory on a node. This could lead to a Denial of Service (DoS) condition where other\ncontainers on the same node are starved of memory. These containers may slow down, become unresponsive, or even crash, affecting the overall\nfunctionality and availability of applications running on them.</p>\n<h4>Inefficient Resource Allocation</h4>\n<p>When containers lack specified resource requests, the Kubernetes scheduler may not make optimal decisions about pod placement and resource\ncontention management. This could result in the scheduler placing a resource-intensive pod on a node with insufficient resources, leading to\nperformance issues or even node failure.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "VULNERABILITY",
            "rule_status": "READY"
        }
    },
    {
        "key": "12dd5aee-7c0f-4512-8ac1-d8e749434755",
        "severity": "MAJOR",
        "message": "Use a specific version tag for the image.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": null,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6596",
        "status": "CLOSED",
        "rule_details": {
            "name": "Specific version tag for image should be used",
            "description": "<p>When a container image is not tagged with a specific version, it is referred to as <code>latest</code>. This means that every time the image is\nbuilt, deployed, or run, it will always use the latest version of the image.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://helm.sh/docs/chart_best_practices/pods/#images\">Helm chart best practices - Images</a> </li>\n  <li> <a href=\"https://kubernetes.io/docs/concepts/containers/images/\">Kubernetes - Images</a> </li>\n  <li> <a href=\"https://docs.docker.com/engine/reference/commandline/image_pull/#pull-an-image-by-digest-immutable-identifier\">Pull an image by digest\n  (immutable identifier)</a> </li>\n</ul>\n<p>To avoid these issues, it is recommended to use specific version tags for container images.</p>\n<p>This can be done by appending the version number or tag to the container image name. For example, instead of <code>my-image:latest</code>, it is\nbetter to use <code>my-image:1.2.3-alpine</code> or <code>my-image:1.2.3</code>.</p>\n<p>For even more control and traceability, it is also possible to specify your image by digest using the sha256 of the image. This will pin your image\nto a specific version in time, but will also exclude it from eventual security updates. An example would be using\n<code>my-image@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d</code>.</p>\n<p>More information can be found in the documentation at the end.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: nginx\n      image: nginx # Noncompliant\n\n    - name: nginx\n      image: nginx:latest # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: nginx\n      image: nginx:1.14.2 # Compliant, fixed tag\n\n    - name: nginx\n      image: nginx@sha256:b0ad43f7ee5edbc0effbc14645ae7055e21bc1973aee5150745632a24a752661 # Compliant, SHA of the image\n</pre>\n<h3>How does this work?</h3>\n<p>This way, the same version of the container image is used every time the application is built, deployed, or run, ensuring consistency and\npredictability across different environments. It is also not enough to use the latest tag, as this version also changes with each release.</p>\n<h3>Going the extra mile</h3>\n<p>Adhering to this can also make it easier to track which version of the container image is being used, which can be useful for debugging and\ntroubleshooting purposes.</p>\n<p>While using always the latest version may seem convenient, the build cannot be repeated because it is not clear which was the last version. In\naddition, it can lead to unpredictability and issues such as version mismatch and potential security vulnerabilities.</p>\n<h3>What is the potential impact?</h3>\n<p>For example, if a developer builds and deploys an application using <code>my-image:latest</code>, they may unknowingly be using a different version\nof the image than another developer who also built and deployed the same application using <code>my-image:latest</code>. This can lead to version\nmismatches, which can cause bugs or compatibility issues.</p>\n<p>In addition, using <code>latest</code> as the tag for container images can potentially introduce security vulnerabilities. For instance, if a\nsecurity vulnerability is discovered in an image and a new version is released to fix it, using <code>latest</code> as the tag means that the\napplication will automatically use the updated image, even if it has not been properly tested and vetted for compatibility with the application.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c881b829-d604-47ea-91c9-5f24edb6ea18",
        "severity": "MAJOR",
        "message": "Bind this resource's automounted service account to RBAC or disable automounting.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": 31,
        "type": "VULNERABILITY",
        "rule": "kubernetes:S6865",
        "status": "OPEN",
        "rule_details": {
            "name": "Service account permissions should be restricted",
            "description": "<h4>Noncompliant code example</h4>\n<p>In this example, the service account token is mounted in the pod <code>example-pod</code> by default, but is unnecessary for the pod and its\nservice(s) to function correctly.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec: # Noncompliant\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<p>In this example, the service account token is mounted in the pod <code>example-pod</code> and is necessary, for example because it allows a\nthird-party service to authenticate with the Kubernetes API. However, no specific permissions are granted to the service account:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  serviceAccountName: example-sa # Noncompliant\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  containers:\n  - name: example-container\n    image: nginx\n  automountServiceAccountToken: false\n</pre>\n<p>In the following example, Role bindings are created, but Cluster Role Bindings would be more appropriate if the service account is intended to be\nused across multiple namespaces:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: example-sa\n  namespace: default\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: example-role-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  namespace: default\nspec:\n  serviceAccountName: example-sa\n  containers:\n  - name: example-container\n    image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>The essential part of the solution is to make sure that permissions within the cluster are constructed in a way that minimizes the risk of\nunauthorized access.</p>\n<p>To do so, it follows a least-privilege approach.</p>\n<ol>\n  <li> If the service account token is unnecessary for the pod to function, disable automounting. </li>\n  <li> If the service account token is required, ensure that the service account has the least amount of permissions necessary to perform its\n  function. </li>\n</ol>\n<p>Additionally, service account token automounting can be disabled directly from the service account specification file.</p>\n<p>Service account tokens are Kubernetes secrets to authenticate applications running inside pods to the API server. If a pod is compromised, an\nattacker could use this token to gain access to other resources in the cluster.</p>\n<p>For example, they could create new pods, modify existing ones, or even delete critical system pods, depending on the permissions associated with\nthe service account.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unauthorized Access</h4>\n<p>If a pod with a mounted service account gets compromised, an attacker could potentially use the token to interact with the Kubernetes API, possibly\nleading to unauthorized access to other resources in the cluster.</p>\n<h4>Privilege Escalation</h4>\n<p>Service account tokens are often bound with roles that have extensive permissions. If these tokens are exposed, it could lead to privilege\nescalation where an attacker gains higher-level permissions than intended.</p>\n<h4>Data Breach</h4>\n<p>Service account tokens can be used to access sensitive data stored in the Kubernetes cluster. If these tokens are compromised, it could lead to a\ndata breach.</p>\n<h4>Denial of Service</h4>\n<p>An attacker with access to a service account token could potentially overload the Kubernetes API server by sending a large number of requests,\nleading to a Denial of Service (DoS) attack.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\">Configure Service\n  Accounts for Pods</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/306\">CWE-306 - Missing Authentication for Critical Function</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "VULNERABILITY",
            "rule_status": "READY"
        }
    },
    {
        "key": "12b78e4b-53f5-40ec-a7a4-17290077f2d4",
        "severity": "MAJOR",
        "message": "Specify a memory request for this container.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": 32,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6873",
        "status": "OPEN",
        "rule_details": {
            "name": "Memory requests should be specified",
            "description": "<p>A memory request is a configuration that sets the guaranteed amount of memory that a container will be able to use. It is part of the resource\nmanagement functionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a memory request is set for a container, Kubernetes will only schedule it on a node that can give it that resource, thereby guaranteeing that\nthe container can use the specified requested memory.</p>\n<p>Without a memory request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Without defined requests, Kubernetes doesn’t know how much of a particular resource to allocate to a container. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. This can lead to system instability, and in extreme cases, the node might crash, causing downtime for all containers running on\nthat node.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\">Configure\n  Default Memory Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google Cloud Blog - <a\n  href=\"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\">Kubernetes best\n  practices: Resource requests and limits</a> </li>\n</ul>\n<p>To avoid potential issues, either specify a memory request for each container in a pod specification or create a resource of a kind,\n<code>LimitRange</code>, that sets a default memory request for all containers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          memory: 100Mi\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\n  namespace: default-mem-example\nspec:\n  limits:\n    - type: Container\n      defaultRequest:\n        memory: 100Mi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: default-mem-example\nspec:\n  containers:\n    - name: web\n      image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A request can be set through the property <code>resources.requests.memory</code> of a container. Alternatively, a default request for a namespace\ncan be set with <code>LimitRange</code> through <code>spec.limits[].defaultRequest.memory</code>.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "12f8c6c1-32ab-428d-afcc-f35a39f6b085",
        "severity": "MAJOR",
        "message": "Specify a memory limit for this container.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": 32,
        "type": "VULNERABILITY",
        "rule": "kubernetes:S6864",
        "status": "OPEN",
        "rule_details": {
            "name": "Memory limits should be enforced",
            "description": "<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\">Configure\n  Default Memory Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/770\">CWE-770 - Allocation of Resources Without Limits or Throttling</a> </li>\n</ul>\n<p>To avoid potential issues, either specify a memory limit for each container in a pod specification or create a resource of a kind\n<code>LimitRange</code>, that sets a default memory limit for all containers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        limits:\n          memory: 100Mi\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\n  namespace: default-mem-example\nspec:\n  limits:\n    - type: Container\n      default:\n        memory: 100Mi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: default-mem-example\nspec:\n  containers:\n    - name: web\n      image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A limit can be set through the property <code>resources.limits.memory</code> of a container. Alternatively, a default limit for a namespace can be\nset with <code>LimitRange</code> through <code>spec.limits[].default.memory</code>.</p>\n<p>A memory limit is a configuration that sets the maximum amount of memory that a container can use. It is part of the resource management\nfunctionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a memory limit is set for a container, Kubernetes ensures that the container does not exceed the specified limit. If a container tries to use\nmore memory than its limit, the system will reclaim the excess memory, which could lead to termination of processes within the container.</p>\n<p>Without a memory limit, a container can potentially consume all available memory on a node, which can lead to unpredictable behavior of the\ncontainer or the node itself. Therefore, defining a memory limit for each container is a best practice in Kubernetes configurations. It helps in\nmanaging resources effectively and ensures that a single container does not monopolize the memory resources of a node.</p>\n<h3>What is the potential impact?</h3>\n<h4>Denial of Service</h4>\n<p>Without a memory limit, a container can consume all available memory on a node. This could lead to a Denial of Service (DoS) condition where other\ncontainers on the same node are starved of memory. These containers may slow down, become unresponsive, or even crash, affecting the overall\nfunctionality and availability of applications running on them.</p>\n<h4>Inefficient Resource Allocation</h4>\n<p>When containers lack specified resource requests, the Kubernetes scheduler may not make optimal decisions about pod placement and resource\ncontention management. This could result in the scheduler placing a resource-intensive pod on a node with insufficient resources, leading to\nperformance issues or even node failure.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "VULNERABILITY",
            "rule_status": "READY"
        }
    },
    {
        "key": "5ba4e55e-c0b7-4cea-aed3-d5fb48f653a0",
        "severity": "MAJOR",
        "message": "Specify a storage request for this container.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": 32,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6897",
        "status": "OPEN",
        "rule_details": {
            "name": "Storage requests should be specified",
            "description": "<p>To avoid potential issues, specify a storage request for each container using ephemeral storage with\n<code>resources.requests.ephemeral-storage</code>, or create a <code>LimitRange</code> resource, that sets a default storage request for all\ncontainers in all pod specifications belonging to the same namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          ephemeral-storage: \"2Gi\"\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: storage-limit-range\n  namespace: namespace-with-limit-range\nspec:\n  limits:\n  - defaultRequest:\n      ephemeral-storage: \"10Mi\"\n    type: Container\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\n  namespace: namespace-with-limit-range\nspec:\n  containers:\n    - name: web\n      image: nginx\n      volumeMounts:\n        - name: ephemeral\n          mountPath: \"/tmp\"\n</pre>\n<h3>How does this work?</h3>\n<p>You can set a request through the property <code>resources.requests.ephemeral-storage</code> of a container. Alternatively, you can set a default\nrequest for a namespace with <code>LimitRange</code> through <code>spec.limits[].defaultRequest.ephemeral-storage</code>.</p>\n<p>Ephemeral storage is a type of storage that is temporary and non-persistent, meaning it does not retain data once the process is terminated. In the\ncontext of Kubernetes, ephemeral storage is used for storing temporary files that a running container can write and read.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a\n  href=\"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#setting-requests-and-limits-for-local-ephemeral-storage\">Setting requests and limits for local ephemeral storage</a> </li>\n</ul>\n<p>Without a storage request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Kubernetes doesn’t know how much of a particular resource to allocate to a container without defined requests. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. This can lead to system instability, and in extreme cases, the node might crash, causing downtime for all containers running on\nthat node.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "d9dce8a5-84c8-4fb8-8fd8-41c7bddd40ec",
        "severity": "MAJOR",
        "message": "Specify a CPU request for this container.",
        "component": "spring-petclinic:k8s/petclinic.yml",
        "line": 32,
        "type": "CODE_SMELL",
        "rule": "kubernetes:S6892",
        "status": "OPEN",
        "rule_details": {
            "name": "CPU requests should be specified",
            "description": "<p>Without a CPU request, a container can potentially be scheduled on a node where there are not enough resources for it. This can lead to\nunpredictable behavior of the container and the node itself.</p>\n<h3>What is the potential impact?</h3>\n<h4>Unpredictable Resource Allocation</h4>\n<p>Without defined requests, Kubernetes doesn’t know how much of a particular resource to allocate to a container. This can lead to unpredictable\nbehavior, as the Kubernetes scheduler may not make optimal decisions about pod placement and resource contention management. For instance, a container\nmight not get the resources it needs to function correctly, leading to performance issues or even failure of the container.</p>\n<h4>System Instability</h4>\n<p>In the worst-case scenario, if a container uses more resources than a node can handle (due to lack of defined requests), it can cause the node to\nrun out of resources. In this case, Kubernetes may throttle its CPU usage. By setting a CPU request, Kubernetes will make sure that the container will\nget the requested CPU.</p>\n<p>To avoid potential issues, either specify a CPU request for each container with <code>resources.requests.cpu</code> or create a resource of a kind\n<code>LimitRange</code> that sets a default CPU request for all containers in all pod specifications in a namespace.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web # Noncompliant\n      image: nginx\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: web\n      image: nginx\n      resources:\n        requests:\n          cpu: 0.5\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: cpu-request-range\n  namespace: default-cpu-example\nspec:\n  limits:\n  - defaultRequest:\n      cpu: 0.5\n    type: Container\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-ns-compliant\n  namespace: default-cpu-example\nspec:\n  containers:\n  - name: nginx-ns-compliant\n    image: nginx\n</pre>\n<h3>How does this work?</h3>\n<p>A request can be set through the property <code>resources.requests.cpu</code> of a container. Alternatively, a default request for a namespace can\nbe set with <code>LimitRange</code> through the property <code>spec.limits[].defaultRequest.cpu</code>.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> Kubernetes Documentation - <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/\">Configure\n  Default CPU Requests and Limits for a Namespace</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google Cloud Blog - <a\n  href=\"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\">Kubernetes best\n  practices: Resource requests and limits</a> </li>\n</ul>\n<p>A CPU request is a configuration that sets the guaranteed amount of CPU cores that a container will be able to use. It is part of the resource\nmanagement functionality of Kubernetes, which allows for the control and allocation of computational resources to containers.</p>\n<p>When a CPU request is set for a container, Kubernetes will only schedule it on a node that can give it that resource, thereby guaranteeing that the\ncontainer can use the specified requested CPU cores.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "caf06809-1d78-46d6-834d-ab547770bcf7",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners/{ownerId}/pets/new\" 6 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 85,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "85541a2e-b116-4507-9680-7f07e3b65397",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"pets/createOrUpdatePetForm\" 8 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 87,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "af2684f7-8a3e-4308-bb72-ca27ed88e12a",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"Betty\" 4 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 94,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "0955ce4c-6ae8-41d3-82c5-d46163e7bc98",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"2015-02-12\" 6 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 96,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "993314c8-f033-4d8c-bbb4-b29d4495dcfc",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"birthDate\" 12 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 96,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "d1db2b12-8416-4603-8475-431286c185bb",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"owner\" 6 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 109,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "4802f1e9-2010-4036-868d-a26f2eee12b3",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"required\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 112,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3268a39b-1cac-4b7e-b207-92875182e84a",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners/{ownerId}/pets/{petId}/edit\" 4 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 161,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "738de1fb-e490-459c-ac9d-d8737383731c",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"error\" 3 times.",
        "component": "spring-petclinic:src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java",
        "line": 78,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "beb63bd0-b919-4ab2-95bb-c4a9617de2ce",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"owner\" 24 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 110,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3a01c964-63bc-4edf-bdeb-42fa4ac0a3c5",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners/{ownerId}/edit\" 5 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 174,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c3b555ba-7078-45af-bd09-9c78c4b337cb",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"telephone\" 7 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 121,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c0d299a6-b7e0-41b5-9025-ff841c67edaf",
        "severity": "MAJOR",
        "message": "Merge this if statement with the enclosing one.",
        "component": "spring-petclinic:src/main/java/org/springframework/samples/petclinic/owner/Owner.java",
        "line": 138,
        "type": "CODE_SMELL",
        "rule": "java:S1066",
        "status": "OPEN",
        "rule_details": {
            "name": "Mergeable \"if\" statements should be combined",
            "description": "<p>Nested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.</p>\n<p>Merging <code>if</code> statements when possible will decrease the nesting of the code and improve its readability.</p>\n<p>Code like</p>\n<pre>\nif (condition1) {\n  if (condition2) {             // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<p>Will be more readable as</p>\n<pre>\nif (condition1 &amp;&amp; condition2) { // Compliant\n  /* ... */\n}\n</pre>\n<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {  // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) { // Compliant\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "b295236a-ee4a-478a-a10b-b4e4c9c96f28",
        "severity": "MAJOR",
        "message": "Define and throw a dedicated exception instead of using a generic one.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
        "line": 82,
        "type": "CODE_SMELL",
        "rule": "java:S112",
        "status": "OPEN",
        "rule_details": {
            "name": "Generic exceptions should never be thrown",
            "description": "<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS1181'>S1181</a> - Generic exceptions should not be caught </li>\n</ul>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "b9b4c32c-9daa-472d-8a2f-5eeeada9925a",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/oups\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
        "line": 68,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "36d09de6-865c-485e-a54b-f8d664f667bc",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners/new\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 108,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "a73ebcc0-557f-4d57-b7ec-1ef721b12ab2",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"firstName\" 6 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 117,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "6ba45ee6-07ac-4cfe-98c2-9606b21cbc68",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"Bloggs\" 4 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 118,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "f0f91c06-5c29-4e15-9d34-5ef2c90cd536",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"lastName\" 10 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 118,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "1e0e5938-833a-4e44-a515-3b93ae491741",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"address\" 7 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 119,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "40adeb64-c240-403e-9c2c-7f9bfbb71dc2",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"London\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 120,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "9eda3938-4d29-4eb2-8e05-024f19cd678d",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners?page=1\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 148,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "d65a5a32-3f86-41aa-9912-978c57921b57",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"hamster\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
        "line": 68,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "5742981b-d8a1-4293-ad58-25f8774b0113",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"/owners/{ownerId}/pets/{petId}/visits/new\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
        "line": 69,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "64b1174b-aa65-409c-9232-7e1619f03105",
        "severity": "MAJOR",
        "message": "Remove this commented out code.",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 483,
        "type": "CODE_SMELL",
        "rule": "css:S125",
        "status": "OPEN",
        "rule_details": {
            "name": "Sections of code should not be commented out",
            "description": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "5e7069ae-c53e-4ae1-ac96-ed8cc7eadf2d",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \".dropend .dropdown-toggle::after\", first used at line 2867",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 2880,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "8b4030ce-34e8-4117-972d-f8d861cbfcca",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \".dropstart .dropdown-toggle::after\", first used at line 2890",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 2896,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "aa36a878-365a-40b6-bd26-11365ee7c456",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \".dropstart .dropdown-toggle::before\", first used at line 2899",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 2911,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "bcd9b83c-cb1e-4cc7-b5de-754efb0b8834",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \".btn-primary\", first used at line 2389",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9275,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "b225d79a-b8be-45b8-a90e-23ed4bba7107",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"code\", first used at line 348",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9294,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "fa0152a6-2689-44c1-ba3d-8a9aec1e2be2",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"h1, .h1\", first used at line 229",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9303,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "ebf1d997-d52e-43fd-847e-9f6a9e85c226",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"hr\", first used at line 215",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9387,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "1248387d-8383-4c17-bd04-f7d87c92887e",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"h1, .h1\", first used at line 229",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9410,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "1ba17022-7cfa-49d1-bf4d-b6562291821d",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"h2, .h2\", first used at line 234",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9415,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "b02eb242-0ea2-4b31-bc97-c10878516eca",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \"h3, .h3\", first used at line 239",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9422,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3bf35745-4780-4892-9b59-2ecfed09dd11",
        "severity": "MAJOR",
        "message": "Unexpected duplicate selector \".navbar\", first used at line 3169",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9432,
        "type": "CODE_SMELL",
        "rule": "css:S4666",
        "status": "OPEN",
        "rule_details": {
            "name": "Selectors should not be duplicated",
            "description": "<p>To fix your code, either remove the duplicated selector or merge all declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\np {\n  color: blue;\n  font-size: 16px;\n}\n\np { /* Noncompliant: duplicated selector 'p', overwrites property 'color' */\n  color: red;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\np {\n  color: red;\n  font-size: 16px;\n}\n</pre>\n<p>In CSS, when selectors are duplicated, the browser applies them in cascade. This means that if two selectors are identical, the second one takes\nprecedence. However, if the declarations within the selectors are not conflicting, they will be combined.</p>\n<p>This behavior can lead to unexpected results and make debugging more difficult, especially in larger stylesheets. Therefore, it’s generally\nrecommended to avoid duplicating selectors.</p>\n<p>The rule detects the following kinds of duplications:</p>\n<ul>\n  <li> within a list of selectors in a single rule set, </li>\n  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a> </li>\n  <li> MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and\n  inheritance</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c35f2161-3cb7-42fe-96fa-2189aff11980",
        "severity": "MAJOR",
        "message": "Remove this commented out code.",
        "component": "spring-petclinic:src/main/resources/static/resources/css/petclinic.css",
        "line": 9466,
        "type": "CODE_SMELL",
        "rule": "css:S125",
        "status": "OPEN",
        "rule_details": {
            "name": "Sections of code should not be commented out",
            "description": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "04224047-6503-4336-a63e-48d09be71145",
        "severity": "MAJOR",
        "message": "Define and throw a dedicated exception instead of using a generic one.",
        "component": "spring-petclinic:src/main/java/org/springframework/samples/petclinic/system/CrashController.java",
        "line": 33,
        "type": "CODE_SMELL",
        "rule": "java:S112",
        "status": "OPEN",
        "rule_details": {
            "name": "Generic exceptions should never be thrown",
            "description": "<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS1181'>S1181</a> - Generic exceptions should not be caught </li>\n</ul>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "cb47e1ed-54fd-4c4d-8c56-bfd231b012ce",
        "severity": "BLOCKER",
        "message": "Make sure this MySQL database password gets changed and removed from the code.",
        "component": "spring-petclinic:docker-compose.yml",
        "line": 10,
        "type": "VULNERABILITY",
        "rule": "secrets:S6697",
        "status": "OPEN",
        "rule_details": {
            "name": "MySQL database passwords should not be disclosed",
            "description": "<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>General-purpose MySQL log files contain information about user authentication. They can be used to audit malicious use of password-leak-affected\naccounts.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"mysql://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\nuser = os.environ[\"MYSQL_USER\"]\npassword = os.environ[\"MYSQL_PASSWORD\"]\n\nuri = f\"mysql://{user}:{password}@example.com/testdb\"\n</pre>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in MySQL are used to authenticate users against the database engine. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.</p>\n<p>If a MySQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored within it\nand the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a MySQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the\npurposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the MySQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>",
            "rule_severity": "BLOCKER",
            "rule_type": "VULNERABILITY",
            "rule_status": "READY"
        }
    },
    {
        "key": "4401c74f-fd27-4bb8-8703-91ab6cd83646",
        "severity": "MINOR",
        "message": "Remove useless curly braces around statement (sonar.java.source not set. Assuming 8 or greater.)",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
        "line": 73,
        "type": "CODE_SMELL",
        "rule": "java:S1602",
        "status": "OPEN",
        "rule_details": {
            "name": "Lambdas containing only one statement should not nest this statement in a block",
            "description": "<ul>\n  <li> If the code block consists only of a <code>return</code> statement, replace the code block with the argument expression from the\n  <code>return</code> statement. </li>\n  <li> If the code block consists of a single statement that is not a <code>return</code> statement, replace the code block with that statement. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n(a, b) -&gt; { return a + b; } // Noncompliant, replace code block with expression\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n(a, b) -&gt; a + b             // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nx -&gt; {System.out.println(x+1);} // Noncompliant, replace code block with statement\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nx -&gt; System.out.println(x+1)    // Compliant\n</pre>\n<p>This rule raises an issue when a lambda expression uses block notation while expression notation could be used.</p>\n<p>The right-hand side of a lambda expression can be written in two ways:</p>\n<ol>\n  <li> Expression notation: the right-hand side is as an expression, such as in <code>(a, b) → a + b</code> </li>\n  <li> Block notation: the right-hand side is a conventional function body with a code block and an optional return statement, such as in <code>(a, b)\n  → {return a + b;}</code> </li>\n</ol>\n<p>By convention, expression notation is preferred over block notation. Block notation must be used when the function implementation requires more\nthan one statement. However, when the code block consists of only one statement (which may or may not be a <code>return</code> statement), it can be\nrewritten using expression notation.</p>\n<p>This convention exists because expression notation has a cleaner, more concise, functional programming style and is regarded as more readable.</p>",
            "rule_severity": "MINOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3e03486c-d88d-4467-994f-7d8b9fb3c199",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/error.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "9bf973d4-1715-41fc-9dac-81af5f6e8cd1",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/error.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "4c80fba3-74c5-43be-8fa1-432a22aefbab",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/owners/createOrUpdateOwnerForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "7c85b1be-7c69-4077-8c9d-828716af49cf",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/owners/createOrUpdateOwnerForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "a6e06952-1980-4603-bc42-98fa55176827",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/owners/createOrUpdateOwnerForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "27213e4b-c039-436e-b3ce-661107f07014",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/owners/findOwners.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "5a76d96d-cb6d-48bf-8060-fe26e9735b19",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/owners/findOwners.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "725d36eb-d669-4e90-9246-fc07ba58bda9",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/owners/findOwners.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "00053d2c-b7ee-49ab-b50f-2f95a9029e90",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownerDetails.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "dc7fd899-2667-40d4-96f7-d6fb77097ad7",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownerDetails.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "23aad479-7f11-4b08-9571-d6eaa4d7c401",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownersList.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "419c3841-f688-4de5-a2a7-f8b5f41f2f51",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownersList.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "002bd0e7-af24-4539-92c7-12cf84fc6302",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdatePetForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "7bc293a6-4c93-4ea8-9e5c-a992fd3508af",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdatePetForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "e39b19c9-66dc-42ce-80a1-4c8be7432384",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdatePetForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "6e90405e-0945-43b0-a854-307ea23d1d48",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdateVisitForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "9fbd0df1-b627-427c-bfcb-41139cded421",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdateVisitForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "d77c8742-7a22-4adb-8996-dfa536b06296",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdateVisitForm.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "69837a8d-3e45-4494-a9f4-1e281d07bb71",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/vets/vetList.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "db68fa86-4ed5-40e9-addd-e01ce0dff500",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/vets/vetList.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "0174fc0a-49ff-4974-82b5-b6a0c7624faa",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/welcome.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "105d930f-9e46-453a-88d3-2f51d49bbd40",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/welcome.html",
        "line": 3,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "85204de9-0eed-4961-a965-2c8241269435",
        "severity": "MAJOR",
        "message": "Rename \"vets\" which hides the field declared at line 78.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
        "line": 202,
        "type": "CODE_SMELL",
        "rule": "java:S1117",
        "status": "OPEN",
        "rule_details": {
            "name": "Local variables should not shadow class fields",
            "description": "<p>Shadowing occurs when a local variable has the same name as a variable or a field in an outer scope.</p>\n<p>This can lead to three main problems:</p>\n<ul>\n  <li> Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. </li>\n  <li> Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. </li>\n  <li> Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. </li>\n</ul>\n<p>To avoid these problems, rename the shadowing, shadowed, or both identifiers to accurately represent their purpose with unique and meaningful\nnames.</p>\n<p>This rule focuses on variables in methods that shadow a field.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0; // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">DCL51-J. Do not\n  shadow or obscure identifiers in subscopes</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2176'>S2176</a> - Class names should not shadow interfaces or superclasses </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS2387'>S2387</a> - Child class fields should not shadow parent class fields </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS4977'>S4977</a> - Type parameters should not shadow other type parameters </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "ea30cee3-0754-4f05-9393-231043fe0e15",
        "severity": "MINOR",
        "message": "Add an \"alt\" attribute to this image.",
        "component": "spring-petclinic:src/main/resources/templates/error.html",
        "line": 6,
        "type": "CODE_SMELL",
        "rule": "Web:ImgWithoutAltCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "Image, area and button with image elements should have an \"alt\" attribute",
            "description": "<h3>Documentation</h3>\n<ul>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/tutorials/images/decision-tree/\">W3C WAI&nbsp;Web Accessibility Tutorials</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\">Providing text alternatives for the area elements of image maps</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\">Using alt attributes on images used as submit buttons</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\">Using alt attributes on img elements</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H67.html\">Using null alt text and no title attribute on img elements for images that AT\n  should ignore</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H2.html\">Combining adjacent image and text links for the same resource</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all\">Non-text Content</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-refs\">Link Purpose (In Context)</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-link\">Link Purpose (Link Only)</a> </li>\n</ul>\n<p>The <code>alt</code> attribute provides a textual alternative to an image.</p>\n<p>It is used whenever the actual image cannot be rendered.</p>\n<p>Common reasons for that include:</p>\n<ul>\n  <li> The image can no longer be found </li>\n  <li> Visually impaired users using a screen reader software </li>\n  <li> Image loading is disabled, to reduce data consumption on mobile phones </li>\n</ul>\n<p>It is also very important not to set an <code>alt</code> attribute to a non-informative value. For example, <code>&lt;img ... alt=\"logo\"&gt;</code>\nis useless as it doesn’t give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image\ninstead of an <code>&lt;img&gt;</code> tag. If using CSS <code>background-image</code> is not possible, an empty <code>alt=\"\"</code> is tolerated. See\nExceptions below.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> An <code>&lt;input type=\"image\"&gt;</code> or <code>&lt;area&gt;</code> element has no <code>alt</code> attribute or it holds an empty string\n  value. </li>\n  <li> An <code>&lt;img&gt;</code> element has no <code>alt</code> attribute. </li>\n</ul>\n<h3>Exceptions</h3>\n<p><code>&lt;img&gt;</code> elements with an empty string&nbsp;<code>alt=\"\"</code> attribute won’t raise any issue. However, this way should be used\nin two cases only:</p>\n<p>When the image is decorative and it is not possible to use a CSS background image. For example, when the decorative <code>&lt;img&gt;</code> is\ngenerated via javascript with a source image coming from a database, it is better to use an <code>&lt;img alt=\"\"&gt;</code> tag rather than generate\nCSS code.</p>\n<pre>\n&lt;li *ngFor=\"let image of images\"&gt;\n    &lt;img [src]=\"image\" alt=\"\"&gt;\n&lt;/li&gt;\n</pre>\n<p>When the image is not decorative but its <code>alt</code> text would repeat a nearby text. For example, images contained in links should not\nduplicate the link’s text in their <code>alt</code> attribute, as it would make the screen reader repeat the text twice.</p>\n<pre>\n&lt;a href=\"flowers.html\"&gt;\n    &lt;img src=\"tulip.gif\" alt=\"\" /&gt;\n    A blooming tulip\n&lt;/a&gt;\n</pre>\n<p>In all other cases you should use CSS background images.</p>\n<p>Add an alternative text to the HTML element.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;img src=\"foo.png\" /&gt; &lt;!-- missing `alt` attribute --&gt;\n&lt;input type=\"image\" src=\"bar.png\" /&gt; &lt;!-- missing `alt` attribute --&gt;\n&lt;input type=\"image\" src=\"bar.png\" alt=\"\" /&gt; &lt;!-- empty `alt` attribute on &lt;input&gt; --&gt;\n\n&lt;img src=\"house.gif\" usemap=\"#map1\"\n    alt=\"rooms of the house.\" /&gt;\n&lt;map id=\"map1\" name=\"map1\"&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,42,42\"\n    href=\"bedroom.html\"/&gt; &lt;!-- missing `alt` attribute --&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,21,21\"\n    href=\"lounge.html\" alt=\"\"/&gt; &lt;!-- empty `alt` attribute on &lt;area&gt; --&gt;\n&lt;/map&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;img src=\"foo.png\" alt=\"Some textual description of foo.png\" /&gt;\n&lt;input type=\"image\" src=\"bar.png\" alt=\"Textual description of bar.png\" /&gt;\n\n&lt;img src=\"house.gif\" usemap=\"#map1\"\n    alt=\"rooms of the house.\" /&gt;\n&lt;map id=\"map1\" name=\"map1\"&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,42,42\"\n    href=\"bedroom.html\" alt=\"Bedroom\" /&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,21,21\"\n    href=\"lounge.html\" alt=\"Lounge\"/&gt;\n&lt;/map&gt;\n</pre>",
            "rule_severity": "MINOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "05e75e5b-74df-47d7-a1cd-90dd38585373",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/fragments/inputField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "34547048-aa66-471e-8b87-a7cc24fcedd5",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/inputField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "9b029f77-ed48-485b-843e-04e0d8df9d58",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/inputField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "1a329b04-a46b-4183-b780-f04d603896bd",
        "severity": "MAJOR",
        "message": "A form label must be associated with a control.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/inputField.html",
        "line": 8,
        "type": "CODE_SMELL",
        "rule": "Web:S6853",
        "status": "OPEN",
        "rule_details": {
            "name": "Label elements should have a text label and an associated control",
            "description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>\n<p>A <code>&lt;label&gt;</code> element should wrap a control element or have an <code>&lt;htmlFor&gt;</code> attribute referencing a control and text\ncontent.</p>\n<p>When a label element lacks a text label or an associated control, it can lead to several issues:</p>\n<ol>\n  <li> <strong>Poor Accessibility</strong>: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. </li>\n  <li> <strong>Confusing User Interface</strong>: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. </li>\n  <li> <strong>Code Maintainability</strong>: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. </li>\n</ol>\n<p>Control elements are: * <code>&lt;input&gt;</code> * <code>&lt;meter&gt;</code> * <code>&lt;output&gt;</code> * <code>&lt;progress&gt;</code> *\n<code>&lt;select&gt;</code> * <code>&lt;textarea&gt;</code></p>\n<h3>Exceptions</h3>\n<p>Custom components may contain control elements, therefore label elements containing custom elements do not raise issues.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">The Label element</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\">Info and Relationships</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\">Labels or Instructions</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3b4947ad-ad27-45fd-a480-8ac76cdd32a4",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/fragments/layout.html",
        "line": 2,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "65dec51d-ec4a-4601-811c-fa73fb406545",
        "severity": "MAJOR",
        "message": "Add \"lang\" and/or \"xml:lang\" attributes to this \"<html>\" element",
        "component": "spring-petclinic:src/main/resources/templates/fragments/selectField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:S5254",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<html>\" element should have a language attribute",
            "description": "<ul>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/html.html#H57\">WCAG2, H57</a> - Using language attributes on the html element </li>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id\">WCAG2, 3.1.1</a> - Language of Page </li>\n</ul>\n<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the\ndefault language of a document.</p>\n<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>\n<p>Other benefits of marking the language include assisting user agents in providing dictionary definitions or helping users benefit from translation\ntools.</p>\n<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>\n<p>&nbsp;</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Noncompliant --&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xml:lang=\"en\"&gt;\n&nbsp;&nbsp;&nbsp; &lt;head&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;\n &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content=\"text/html; charset=utf-8\" /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;\n\n\n&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp; &lt;/body&gt;\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "72750f6e-474a-49fa-93a2-768814d42e7e",
        "severity": "MAJOR",
        "message": "Insert a <!DOCTYPE> declaration to before this <html> tag.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/selectField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:DoctypePresenceCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
            "description": "<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.</p>\n<p>Validators also rely on it to know which rules to enforce.</p>\n<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;  &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;  &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "a2721bb3-1785-4425-a7bf-72ade0aa4fee",
        "severity": "MAJOR",
        "message": "Add a <title> tag to this page.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/selectField.html",
        "line": 1,
        "type": "BUG",
        "rule": "Web:PageWithoutTitleCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "\"<title>\" should be present in all pages",
            "description": "<p>Titles are important because they are displayed in search engine results as well as the browser’s toolbar.</p>\n<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a\n<code>&lt;head&gt;</code> one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n&lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "5060aab7-b3a3-4ab2-b923-6e8930a8eedf",
        "severity": "MAJOR",
        "message": "A form label must be associated with a control.",
        "component": "spring-petclinic:src/main/resources/templates/fragments/selectField.html",
        "line": 8,
        "type": "CODE_SMELL",
        "rule": "Web:S6853",
        "status": "OPEN",
        "rule_details": {
            "name": "Label elements should have a text label and an associated control",
            "description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>\n<p>A <code>&lt;label&gt;</code> element should wrap a control element or have an <code>&lt;htmlFor&gt;</code> attribute referencing a control and text\ncontent.</p>\n<p>When a label element lacks a text label or an associated control, it can lead to several issues:</p>\n<ol>\n  <li> <strong>Poor Accessibility</strong>: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. </li>\n  <li> <strong>Confusing User Interface</strong>: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. </li>\n  <li> <strong>Code Maintainability</strong>: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. </li>\n</ol>\n<p>Control elements are: * <code>&lt;input&gt;</code> * <code>&lt;meter&gt;</code> * <code>&lt;output&gt;</code> * <code>&lt;progress&gt;</code> *\n<code>&lt;select&gt;</code> * <code>&lt;textarea&gt;</code></p>\n<h3>Exceptions</h3>\n<p>Custom components may contain control elements, therefore label elements containing custom elements do not raise issues.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">The Label element</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\">Info and Relationships</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\">Labels or Instructions</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "b0c089a2-e27e-43fe-9f07-eb6654ac80b2",
        "severity": "MAJOR",
        "message": "A form label must be associated with a control.",
        "component": "spring-petclinic:src/main/resources/templates/owners/findOwners.html",
        "line": 12,
        "type": "CODE_SMELL",
        "rule": "Web:S6853",
        "status": "OPEN",
        "rule_details": {
            "name": "Label elements should have a text label and an associated control",
            "description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>\n<p>A <code>&lt;label&gt;</code> element should wrap a control element or have an <code>&lt;htmlFor&gt;</code> attribute referencing a control and text\ncontent.</p>\n<p>When a label element lacks a text label or an associated control, it can lead to several issues:</p>\n<ol>\n  <li> <strong>Poor Accessibility</strong>: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. </li>\n  <li> <strong>Confusing User Interface</strong>: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. </li>\n  <li> <strong>Code Maintainability</strong>: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. </li>\n</ol>\n<p>Control elements are: * <code>&lt;input&gt;</code> * <code>&lt;meter&gt;</code> * <code>&lt;output&gt;</code> * <code>&lt;progress&gt;</code> *\n<code>&lt;select&gt;</code> * <code>&lt;textarea&gt;</code></p>\n<h3>Exceptions</h3>\n<p>Custom components may contain control elements, therefore label elements containing custom elements do not raise issues.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">The Label element</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\">Info and Relationships</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\">Labels or Instructions</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "397c1031-cb79-4758-8cfd-18ba46bf72ba",
        "severity": "MAJOR",
        "message": "Add \"<th>\" headers to this \"<table>\".",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownerDetails.html",
        "line": 51,
        "type": "BUG",
        "rule": "Web:S5256",
        "status": "OPEN",
        "rule_details": {
            "name": "Tables should have headers",
            "description": "<p>Table headers are essential to enhance the accessibility of a table’s data, particularly for assistive technologies like screen readers. These\nheaders provide the necessary context to transform data into information. Without headers, users get rapidly lost in the flow of data.</p>\n<p>This rule raises an issue whenever a <code>&lt;table&gt;</code> does not contain any <code>&lt;th&gt;</code> elements.</p>\n<h3>Exceptions</h3>\n<p>No issue will be raised on <code>&lt;table&gt;</code> used for layout purpose, i.e. when it contains a <code>role</code> attribute set to\n<code>\"presentation\"</code> or <code>\"none\"</code>.</p>\n<pre>\n&lt;table role=\"presentation\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Name&lt;/td&gt;\n    &lt;td&gt;Age&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;42&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<p>Note that <a href=\"https://www.w3schools.com/html/html_layout.asp\">using &lt;table&gt; for layout purpose is a bad practice</a>.</p>\n<p>No issue will be raised on <code>&lt;table&gt;</code> containing an <code>aria-hidden</code> attribute set to <code>\"true\"</code>.</p>\n<pre>\n&lt;table aria-hidden=\"true\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Name&lt;/td&gt;\n    &lt;td&gt;Age&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;42&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic\">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info\n  and Relationships </li>\n  <li> <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H51\">WCAG2,&nbsp;H51</a> - Using table markup to present tabular information </li>\n</ul>\n<p>The first <code>&lt;tr&gt;</code> of the table should contain <code>&lt;th&gt;</code> elements, with the appropriate description of what the data\nin those columns represents.</p>\n<h3>Going the extra mile</h3>\n<p>Headers should be properly associated with the corresponding <code>&lt;td&gt;</code> cells by using either a <code>scope</code> attribute or\n<code>headers</code> and <code>id</code> attributes. See <a href=\"https://www.w3.org/WAI/tutorials/tables/tips/\">W3C WAI Web Accessibility\nTutorials</a> for more information.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;table&gt; &lt;!-- Noncompliant --&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Name&lt;/td&gt;\n    &lt;td&gt;Age&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n    &lt;th scope=\"col\"&gt;Age&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "23f717e7-3f10-4896-b5e3-c20c95b3d8ef",
        "severity": "MAJOR",
        "message": "Remove this deprecated \"valign\" attribute.",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownerDetails.html",
        "line": 54,
        "type": "CODE_SMELL",
        "rule": "Web:S1827",
        "status": "OPEN",
        "rule_details": {
            "name": "Attributes deprecated in HTML5 should not be used",
            "description": "<p>To ensure the best user experience, deprecated attributes should not be used. This table lists the deprecated attributes this rule is checking for,\nand how to fix them.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 33.3333%;\">\n    <col style=\"width: 33.3333%;\">\n    <col style=\"width: 33.3334%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Removed from</th>\n      <th>Fix</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>accept</code></p></td>\n      <td><p><code>form</code></p></td>\n      <td> <p>Use the <code>accept</code> attribute directly on the <code>input</code> elements instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>align</code></p></td>\n      <td><p><code>caption</code>, <code>col</code>, <code>div</code>, <code>embed</code>, <code>h1-h6</code>, <code>hr</code>, <code>iframe</code>,\n      <code>img</code>, <code>input</code>, <code>legend</code>, <code>object</code>, <code>p</code>, <code>table</code>, <code>tbody</code>,\n      <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>alink</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>allowtransparency</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>archive</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>axis</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use the <code>scope</code> attribute on the relevant <code>th</code></p> </td>\n    </tr>\n    <tr>\n      <td><p><code>background</code></p></td>\n      <td><p><code>body</code>, <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>,\n      <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>bgcolor</code></p></td>\n      <td><p><code>body</code>, <code>table</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>border</code></p></td>\n      <td><p><code>img</code> (<code>border=\"0\"</code> allowed), <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>bordercolor</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>cellpadding</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>cellspacing</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>char</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>charoff</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>charset</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Use an HTTP <code>`Content-Type`</code> header on the linked resource instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>classid</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>clear</code></p></td>\n      <td><p><code>br</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>code</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>codebase</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>codetype</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>color</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>compact</code></p></td>\n      <td><p><code>dl</code>, <code>ol</code>, <code>ul</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>coords</code></p></td>\n      <td><p><code>a</code></p></td>\n      <td> <p>Use <code>area</code> instead of <code>a</code> for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datafld</code></p></td>\n      <td><p><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>fieldset</code>, <code>frame</code>,\n      <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>,\n      <code>param</code>, <code>select</code>, <code>span</code>, <code>textarea</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>dataformatas</code></p></td>\n      <td><p><code>button</code>, <code>div</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,\n      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datapagesize</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datasrc</code></p></td>\n      <td><p><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>,\n      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>,\n      <code>select</code>, <code>span</code>, <code>table</code>, <code>textarea</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>declare</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Repeat the <code>object</code> element completely each time the resource is to be reused</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>event</code></p></td>\n      <td><p><code>script</code></p></td>\n      <td> <p>Use DOM events mechanisms to register event listeners</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>for</code></p></td>\n      <td><p><code>script</code></p></td>\n      <td> <p>Use DOM events mechanisms to register event listeners</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>frame</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>frameborder</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>height</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>hspace</code></p></td>\n      <td><p><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>ismap</code></p></td>\n      <td><p><code>input</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>language</code></p></td>\n      <td><p><code>script</code> (<code>language=\"javascript\"</code>, case insensitive, allowed)</p></td>\n      <td> <p>use the <code>type</code> attribute instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>link</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>lowsrc</code></p></td>\n      <td><p><code>img</code></p></td>\n      <td> <p>Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two separate images</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginbottom</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginheight</code></p></td>\n      <td><p><code>body</code>, <code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginleft</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginright</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>margintop</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginwidth</code></p></td>\n      <td><p><code>body</code>, <code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>methods</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Use the HTTP OPTIONS feature instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>name</code></p></td>\n      <td><p><code>a</code> (<code>name=\"[a's element id]\"</code> allowed), <code>embed</code>, <code>img</code>, <code>option</code></p></td>\n      <td> <p>Use the <code>id</code> attribute instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>nohref</code></p></td>\n      <td><p><code>area</code></p></td>\n      <td> <p>Omitting the <code>href</code> attribute is sufficient; the <code>nohref</code> attribute is unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>noshade</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>nowrap</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>profile</code></p></td>\n      <td><p><code>head</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>rules</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scheme</code></p></td>\n      <td><p><code>meta</code></p></td>\n      <td> <p>Use only one scheme per field, or make the scheme declaration part of the value</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scope</code></p></td>\n      <td><p><code>td</code></p></td>\n      <td> <p>Use <code>th</code> elements for heading cells</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scrolling</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>shape</code></p></td>\n      <td><p><code>a</code></p></td>\n      <td> <p>Use <code>area</code> instead of <code>a</code> for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>size</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>standby</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Optimize the linked resource so that it loads quickly or, at least, incrementally</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>summary</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td>\n        <ul>\n          <li> Use a <code>p</code> element before the <code>table</code> </li>\n          <li> In the table’s <code>caption</code> </li>\n          <li> Before the table, in a <code>figcaption</code> in the same <code>figure</code> as the <code>table</code> </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td><p><code>target</code></p></td>\n      <td><p><code>link</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>text</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>type</code></p></td>\n      <td><p><code>li</code>, <code>param</code>, <code>ul</code></p></td>\n      <td> <p><code>param</code> element is deprecated. Use the <code>data</code> attribute of the <code>object</code> element to set the URL of the\n      external resource. Use CSS for <code>li</code> and <code>ul</code> elements</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>urn</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Specify the preferred persistent identifier using the <code>href</code> attribute</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>usemap</code></p></td>\n      <td><p><code>input</code></p></td>\n      <td> <p>Use the <code>img</code> element for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>valign</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>valuetype</code></p></td>\n      <td><p><code>param</code></p></td>\n      <td> <p><code>param</code> element is deprecated. Use the <code>data</code> attribute of the <code>object</code> element to set the URL of the\n      external resource</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>version</code></p></td>\n      <td><p><code>html</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>vlink</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>vspace</code></p></td>\n      <td><p><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>width</code></p></td>\n      <td><p><code>col</code>, <code>hr</code>, <code>pre</code>, <code>table</code>, <code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;td width=\"50%\"&gt;1st cell&lt;/td&gt;&lt;!-- Noncompliant: 'width' attribute is deprecated --&gt;\n\t\t&lt;td width=\"50%\"&gt;1st cell&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;style&gt;\n\t.equal-width td { width: 50%; }\n&lt;/style&gt;\n&lt;table class=\"equal-width\"&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;1st cell&lt;/td&gt;\n\t\t&lt;td&gt;2nd cell&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> W3C, <a href=\"https://www.w3.org/TR/html5-diff\">Differences in HTML5</a> </li>\n  <li> WHATWG, <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html\">Obsolete Features</a> </li>\n  <li> HTML Standard, <a href=\"https://html.spec.whatwg.org/#non-conforming-features\">Non-conforming features</a> </li>\n</ul>\n<p>HTML5 is the fifth and current major version of HTML. HTML5 introduced many new elements, attributes, and behaviors. While HTML5 also aimed to be\nbackward-compatible with common parsing of older versions of HTML, many old attributes were deprecated.</p>\n<p>The main reason these attributes were deprecated in HTML5 is to separate the concerns of content structure (HTML) and presentation (CSS). This is a\nfundamental principle of modern web design known as the separation of concerns, which provides multiple advantages:</p>\n<ul>\n  <li> Maintainability: By separating content and presentation, you can change the look and feel of a website without touching the HTML. You only need\n  to modify the CSS. </li>\n  <li> Reusability: CSS styles can be reused across multiple pages, making it easier to keep a consistent look and feel across an entire website.\n  </li>\n  <li> Accessibility: Using CSS for presentation makes it easier to create websites that are accessible to users with disabilities. For example,\n  screen readers can more easily interpret web content when it’s separated from the presentation. </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Deprecated attributes are not guaranteed to be supported by all browsers, especially newer ones. This can lead to inconsistent behavior or\nappearance across different browsers.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c5c30584-283c-49f2-adfc-d80588f36c06",
        "severity": "MAJOR",
        "message": "Remove this deprecated \"valign\" attribute.",
        "component": "spring-petclinic:src/main/resources/templates/owners/ownerDetails.html",
        "line": 65,
        "type": "CODE_SMELL",
        "rule": "Web:S1827",
        "status": "OPEN",
        "rule_details": {
            "name": "Attributes deprecated in HTML5 should not be used",
            "description": "<p>To ensure the best user experience, deprecated attributes should not be used. This table lists the deprecated attributes this rule is checking for,\nand how to fix them.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 33.3333%;\">\n    <col style=\"width: 33.3333%;\">\n    <col style=\"width: 33.3334%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Removed from</th>\n      <th>Fix</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>accept</code></p></td>\n      <td><p><code>form</code></p></td>\n      <td> <p>Use the <code>accept</code> attribute directly on the <code>input</code> elements instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>align</code></p></td>\n      <td><p><code>caption</code>, <code>col</code>, <code>div</code>, <code>embed</code>, <code>h1-h6</code>, <code>hr</code>, <code>iframe</code>,\n      <code>img</code>, <code>input</code>, <code>legend</code>, <code>object</code>, <code>p</code>, <code>table</code>, <code>tbody</code>,\n      <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>alink</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>allowtransparency</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>archive</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>axis</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use the <code>scope</code> attribute on the relevant <code>th</code></p> </td>\n    </tr>\n    <tr>\n      <td><p><code>background</code></p></td>\n      <td><p><code>body</code>, <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>,\n      <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>bgcolor</code></p></td>\n      <td><p><code>body</code>, <code>table</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>border</code></p></td>\n      <td><p><code>img</code> (<code>border=\"0\"</code> allowed), <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>bordercolor</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>cellpadding</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>cellspacing</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>char</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>charoff</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>charset</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Use an HTTP <code>`Content-Type`</code> header on the linked resource instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>classid</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>clear</code></p></td>\n      <td><p><code>br</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>code</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>codebase</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>codetype</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Use the <code>data</code> and <code>type</code> attributes to invoke plugins</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>color</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>compact</code></p></td>\n      <td><p><code>dl</code>, <code>ol</code>, <code>ul</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>coords</code></p></td>\n      <td><p><code>a</code></p></td>\n      <td> <p>Use <code>area</code> instead of <code>a</code> for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datafld</code></p></td>\n      <td><p><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>fieldset</code>, <code>frame</code>,\n      <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>,\n      <code>param</code>, <code>select</code>, <code>span</code>, <code>textarea</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>dataformatas</code></p></td>\n      <td><p><code>button</code>, <code>div</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,\n      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datapagesize</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>datasrc</code></p></td>\n      <td><p><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>,\n      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>,\n      <code>select</code>, <code>span</code>, <code>table</code>, <code>textarea</code></p></td>\n      <td> <p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>declare</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Repeat the <code>object</code> element completely each time the resource is to be reused</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>event</code></p></td>\n      <td><p><code>script</code></p></td>\n      <td> <p>Use DOM events mechanisms to register event listeners</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>for</code></p></td>\n      <td><p><code>script</code></p></td>\n      <td> <p>Use DOM events mechanisms to register event listeners</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>frame</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>frameborder</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>height</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>hspace</code></p></td>\n      <td><p><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>ismap</code></p></td>\n      <td><p><code>input</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>language</code></p></td>\n      <td><p><code>script</code> (<code>language=\"javascript\"</code>, case insensitive, allowed)</p></td>\n      <td> <p>use the <code>type</code> attribute instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>link</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>lowsrc</code></p></td>\n      <td><p><code>img</code></p></td>\n      <td> <p>Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two separate images</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginbottom</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginheight</code></p></td>\n      <td><p><code>body</code>, <code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginleft</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginright</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>margintop</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>marginwidth</code></p></td>\n      <td><p><code>body</code>, <code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>methods</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Use the HTTP OPTIONS feature instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>name</code></p></td>\n      <td><p><code>a</code> (<code>name=\"[a's element id]\"</code> allowed), <code>embed</code>, <code>img</code>, <code>option</code></p></td>\n      <td> <p>Use the <code>id</code> attribute instead</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>nohref</code></p></td>\n      <td><p><code>area</code></p></td>\n      <td> <p>Omitting the <code>href</code> attribute is sufficient; the <code>nohref</code> attribute is unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>noshade</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>nowrap</code></p></td>\n      <td><p><code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>profile</code></p></td>\n      <td><p><code>head</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>rules</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scheme</code></p></td>\n      <td><p><code>meta</code></p></td>\n      <td> <p>Use only one scheme per field, or make the scheme declaration part of the value</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scope</code></p></td>\n      <td><p><code>td</code></p></td>\n      <td> <p>Use <code>th</code> elements for heading cells</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>scrolling</code></p></td>\n      <td><p><code>iframe</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>shape</code></p></td>\n      <td><p><code>a</code></p></td>\n      <td> <p>Use <code>area</code> instead of <code>a</code> for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>size</code></p></td>\n      <td><p><code>hr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>standby</code></p></td>\n      <td><p><code>object</code></p></td>\n      <td> <p>Optimize the linked resource so that it loads quickly or, at least, incrementally</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>summary</code></p></td>\n      <td><p><code>table</code></p></td>\n      <td>\n        <ul>\n          <li> Use a <code>p</code> element before the <code>table</code> </li>\n          <li> In the table’s <code>caption</code> </li>\n          <li> Before the table, in a <code>figcaption</code> in the same <code>figure</code> as the <code>table</code> </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td><p><code>target</code></p></td>\n      <td><p><code>link</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>text</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>type</code></p></td>\n      <td><p><code>li</code>, <code>param</code>, <code>ul</code></p></td>\n      <td> <p><code>param</code> element is deprecated. Use the <code>data</code> attribute of the <code>object</code> element to set the URL of the\n      external resource. Use CSS for <code>li</code> and <code>ul</code> elements</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>urn</code></p></td>\n      <td><p><code>a</code>, <code>link</code></p></td>\n      <td> <p>Specify the preferred persistent identifier using the <code>href</code> attribute</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>usemap</code></p></td>\n      <td><p><code>input</code></p></td>\n      <td> <p>Use the <code>img</code> element for image maps</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>valign</code></p></td>\n      <td><p><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>valuetype</code></p></td>\n      <td><p><code>param</code></p></td>\n      <td> <p><code>param</code> element is deprecated. Use the <code>data</code> attribute of the <code>object</code> element to set the URL of the\n      external resource</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>version</code></p></td>\n      <td><p><code>html</code></p></td>\n      <td> <p>Unnecessary. Omit it altogether</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>vlink</code></p></td>\n      <td><p><code>body</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>vspace</code></p></td>\n      <td><p><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n    <tr>\n      <td><p><code>width</code></p></td>\n      <td><p><code>col</code>, <code>hr</code>, <code>pre</code>, <code>table</code>, <code>td</code>, <code>th</code></p></td>\n      <td> <p>Use CSS</p> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;td width=\"50%\"&gt;1st cell&lt;/td&gt;&lt;!-- Noncompliant: 'width' attribute is deprecated --&gt;\n\t\t&lt;td width=\"50%\"&gt;1st cell&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;style&gt;\n\t.equal-width td { width: 50%; }\n&lt;/style&gt;\n&lt;table class=\"equal-width\"&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;1st cell&lt;/td&gt;\n\t\t&lt;td&gt;2nd cell&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h3>Documentation</h3>\n<ul>\n  <li> W3C, <a href=\"https://www.w3.org/TR/html5-diff\">Differences in HTML5</a> </li>\n  <li> WHATWG, <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html\">Obsolete Features</a> </li>\n  <li> HTML Standard, <a href=\"https://html.spec.whatwg.org/#non-conforming-features\">Non-conforming features</a> </li>\n</ul>\n<p>HTML5 is the fifth and current major version of HTML. HTML5 introduced many new elements, attributes, and behaviors. While HTML5 also aimed to be\nbackward-compatible with common parsing of older versions of HTML, many old attributes were deprecated.</p>\n<p>The main reason these attributes were deprecated in HTML5 is to separate the concerns of content structure (HTML) and presentation (CSS). This is a\nfundamental principle of modern web design known as the separation of concerns, which provides multiple advantages:</p>\n<ul>\n  <li> Maintainability: By separating content and presentation, you can change the look and feel of a website without touching the HTML. You only need\n  to modify the CSS. </li>\n  <li> Reusability: CSS styles can be reused across multiple pages, making it easier to keep a consistent look and feel across an entire website.\n  </li>\n  <li> Accessibility: Using CSS for presentation makes it easier to create websites that are accessible to users with disabilities. For example,\n  screen readers can more easily interpret web content when it’s separated from the presentation. </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Deprecated attributes are not guaranteed to be supported by all browsers, especially newer ones. This can lead to inconsistent behavior or\nappearance across different browsers.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "6caf00e2-4e3f-436d-90fd-862acd272a74",
        "severity": "MAJOR",
        "message": "A form label must be associated with a control.",
        "component": "spring-petclinic:src/main/resources/templates/pets/createOrUpdatePetForm.html",
        "line": 14,
        "type": "CODE_SMELL",
        "rule": "Web:S6853",
        "status": "OPEN",
        "rule_details": {
            "name": "Label elements should have a text label and an associated control",
            "description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>\n<p>A <code>&lt;label&gt;</code> element should wrap a control element or have an <code>&lt;htmlFor&gt;</code> attribute referencing a control and text\ncontent.</p>\n<p>When a label element lacks a text label or an associated control, it can lead to several issues:</p>\n<ol>\n  <li> <strong>Poor Accessibility</strong>: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. </li>\n  <li> <strong>Confusing User Interface</strong>: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. </li>\n  <li> <strong>Code Maintainability</strong>: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. </li>\n</ol>\n<p>Control elements are: * <code>&lt;input&gt;</code> * <code>&lt;meter&gt;</code> * <code>&lt;output&gt;</code> * <code>&lt;progress&gt;</code> *\n<code>&lt;select&gt;</code> * <code>&lt;textarea&gt;</code></p>\n<h3>Exceptions</h3>\n<p>Custom components may contain control elements, therefore label elements containing custom elements do not raise issues.</p>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">The Label element</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\">Info and Relationships</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\">Labels or Instructions</a> </li>\n</ul>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "9e3248d2-409a-4bde-acfa-fdd6afb5400d",
        "severity": "MINOR",
        "message": "Add an \"alt\" attribute to this image.",
        "component": "spring-petclinic:src/main/resources/templates/welcome.html",
        "line": 10,
        "type": "CODE_SMELL",
        "rule": "Web:ImgWithoutAltCheck",
        "status": "OPEN",
        "rule_details": {
            "name": "Image, area and button with image elements should have an \"alt\" attribute",
            "description": "<h3>Documentation</h3>\n<ul>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/tutorials/images/decision-tree/\">W3C WAI&nbsp;Web Accessibility Tutorials</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\">Providing text alternatives for the area elements of image maps</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\">Using alt attributes on images used as submit buttons</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\">Using alt attributes on img elements</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H67.html\">Using null alt text and no title attribute on img elements for images that AT\n  should ignore</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H2.html\">Combining adjacent image and text links for the same resource</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all\">Non-text Content</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-refs\">Link Purpose (In Context)</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-link\">Link Purpose (Link Only)</a> </li>\n</ul>\n<p>The <code>alt</code> attribute provides a textual alternative to an image.</p>\n<p>It is used whenever the actual image cannot be rendered.</p>\n<p>Common reasons for that include:</p>\n<ul>\n  <li> The image can no longer be found </li>\n  <li> Visually impaired users using a screen reader software </li>\n  <li> Image loading is disabled, to reduce data consumption on mobile phones </li>\n</ul>\n<p>It is also very important not to set an <code>alt</code> attribute to a non-informative value. For example, <code>&lt;img ... alt=\"logo\"&gt;</code>\nis useless as it doesn’t give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image\ninstead of an <code>&lt;img&gt;</code> tag. If using CSS <code>background-image</code> is not possible, an empty <code>alt=\"\"</code> is tolerated. See\nExceptions below.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> An <code>&lt;input type=\"image\"&gt;</code> or <code>&lt;area&gt;</code> element has no <code>alt</code> attribute or it holds an empty string\n  value. </li>\n  <li> An <code>&lt;img&gt;</code> element has no <code>alt</code> attribute. </li>\n</ul>\n<h3>Exceptions</h3>\n<p><code>&lt;img&gt;</code> elements with an empty string&nbsp;<code>alt=\"\"</code> attribute won’t raise any issue. However, this way should be used\nin two cases only:</p>\n<p>When the image is decorative and it is not possible to use a CSS background image. For example, when the decorative <code>&lt;img&gt;</code> is\ngenerated via javascript with a source image coming from a database, it is better to use an <code>&lt;img alt=\"\"&gt;</code> tag rather than generate\nCSS code.</p>\n<pre>\n&lt;li *ngFor=\"let image of images\"&gt;\n    &lt;img [src]=\"image\" alt=\"\"&gt;\n&lt;/li&gt;\n</pre>\n<p>When the image is not decorative but its <code>alt</code> text would repeat a nearby text. For example, images contained in links should not\nduplicate the link’s text in their <code>alt</code> attribute, as it would make the screen reader repeat the text twice.</p>\n<pre>\n&lt;a href=\"flowers.html\"&gt;\n    &lt;img src=\"tulip.gif\" alt=\"\" /&gt;\n    A blooming tulip\n&lt;/a&gt;\n</pre>\n<p>In all other cases you should use CSS background images.</p>\n<p>Add an alternative text to the HTML element.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;img src=\"foo.png\" /&gt; &lt;!-- missing `alt` attribute --&gt;\n&lt;input type=\"image\" src=\"bar.png\" /&gt; &lt;!-- missing `alt` attribute --&gt;\n&lt;input type=\"image\" src=\"bar.png\" alt=\"\" /&gt; &lt;!-- empty `alt` attribute on &lt;input&gt; --&gt;\n\n&lt;img src=\"house.gif\" usemap=\"#map1\"\n    alt=\"rooms of the house.\" /&gt;\n&lt;map id=\"map1\" name=\"map1\"&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,42,42\"\n    href=\"bedroom.html\"/&gt; &lt;!-- missing `alt` attribute --&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,21,21\"\n    href=\"lounge.html\" alt=\"\"/&gt; &lt;!-- empty `alt` attribute on &lt;area&gt; --&gt;\n&lt;/map&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;img src=\"foo.png\" alt=\"Some textual description of foo.png\" /&gt;\n&lt;input type=\"image\" src=\"bar.png\" alt=\"Textual description of bar.png\" /&gt;\n\n&lt;img src=\"house.gif\" usemap=\"#map1\"\n    alt=\"rooms of the house.\" /&gt;\n&lt;map id=\"map1\" name=\"map1\"&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,42,42\"\n    href=\"bedroom.html\" alt=\"Bedroom\" /&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,21,21\"\n    href=\"lounge.html\" alt=\"Lounge\"/&gt;\n&lt;/map&gt;\n</pre>",
            "rule_severity": "MINOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "baada0c6-b443-4f9c-911e-6f7c6e6ef790",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"George\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 74,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "d54351ef-e576-4958-a902-2fae19d04a91",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"110 W. Liberty St.\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 76,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "d0a637b3-4184-4826-8c27-78c757355d82",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"Madison\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 77,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "eb87d989-519c-4187-b714-e92ab1740ebf",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"6085551023\" 3 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 78,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "2d0880c8-962d-4049-ac61-cf452980bbdf",
        "severity": "MAJOR",
        "message": "Remove this commented out code.",
        "component": "spring-petclinic:src/main/scss/header.scss",
        "line": 40,
        "type": "CODE_SMELL",
        "rule": "css:S125",
        "status": "OPEN",
        "rule_details": {
            "name": "Sections of code should not be commented out",
            "description": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "19838f88-cf9e-4aef-a5d8-10eb1550dcbd",
        "severity": "MAJOR",
        "message": "Remove this commented out code.",
        "component": "spring-petclinic:src/main/scss/typography.scss",
        "line": 53,
        "type": "CODE_SMELL",
        "rule": "css:S125",
        "status": "OPEN",
        "rule_details": {
            "name": "Sections of code should not be commented out",
            "description": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "c26f9a37-72ad-4739-b09d-f62601afcc75",
        "severity": "MAJOR",
        "message": "Remove this commented out code.",
        "component": "spring-petclinic:src/main/scss/typography.scss",
        "line": 54,
        "type": "CODE_SMELL",
        "rule": "css:S125",
        "status": "OPEN",
        "rule_details": {
            "name": "Sections of code should not be commented out",
            "description": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "f0f5ff98-43c2-4d8a-8a0a-ad66bbec5691",
        "severity": "CRITICAL",
        "message": "Define a constant instead of duplicating this literal \"owners/createOrUpdateOwnerForm\" 4 times.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
        "line": 111,
        "type": "CODE_SMELL",
        "rule": "java:S1192",
        "status": "OPEN",
        "rule_details": {
            "name": "String literals should not be duplicated",
            "description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
            "rule_severity": "CRITICAL",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "60ebd5f2-4e21-4ace-aef7-d94267007c17",
        "severity": "MINOR",
        "message": "Use another way to initialize this instance.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
        "line": 84,
        "type": "BUG",
        "rule": "java:S3599",
        "status": "OPEN",
        "rule_details": {
            "name": "Double Brace Initialization should not be used",
            "description": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there’s no leak, DBI is so obscure that it’s bound to\nconfuse most maintainers.</p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
            "rule_severity": "MINOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "51941e2e-29a5-4851-a7dc-8d77d1c213b5",
        "severity": "MAJOR",
        "message": "Move the contents of this initializer to a standard constructor or to field initializers.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
        "line": 85,
        "type": "CODE_SMELL",
        "rule": "java:S1171",
        "status": "OPEN",
        "rule_details": {
            "name": "Only static class initializers should be used",
            "description": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-static-instance-initializer-blocks\">Static vs. Instance Initializer Block in Java</a> </li>\n</ul>\n<p>Non-static initializers should be refactored into standard constructors or field initializers when possible.</p>\n<p>In most cases, the use of constructors, overloaded constructors, or factory methods is preferable for initializing instance variables. These\napproaches provide more explicit and controlled initialization, separate concerns, allow for better error handling, and make the code easier to\nunderstand and maintain.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n    {\n      put(\"a\", \"b\");\n    }\n  }; // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using static initialization block:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using constructor:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  public MyClass() {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using Java 9 <code>Map.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>or using Guava <code>ImmutableMap.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = com.google.common.collect.ImmutableMap.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>Non-static initializers, also known as instance initializers, are blocks of code within a class that are executed when an instance of the class is\ncreated. They are executed when an object of the class is created just before the constructor is called. Non-static initializers are useful when you\nwant to perform some common initialization logic for all objects of a class. They allow you to initialize instance variables in a concise and\ncentralized manner, without having to repeat the same initialization code in each constructor.</p>\n<p>While non-static initializers may have some limited use cases, they are rarely used and can be confusing for most developers because they only run\nwhen new class instances are created.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "3731d02a-3ba0-46b4-b449-0a71b4736e83",
        "severity": "MINOR",
        "message": "Use another way to initialize this instance.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
        "line": 89,
        "type": "BUG",
        "rule": "java:S3599",
        "status": "OPEN",
        "rule_details": {
            "name": "Double Brace Initialization should not be used",
            "description": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there’s no leak, DBI is so obscure that it’s bound to\nconfuse most maintainers.</p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
            "rule_severity": "MINOR",
            "rule_type": "BUG",
            "rule_status": "READY"
        }
    },
    {
        "key": "c2fa5c75-cbeb-4c25-aaae-a436657212ba",
        "severity": "MAJOR",
        "message": "Move the contents of this initializer to a standard constructor or to field initializers.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
        "line": 90,
        "type": "CODE_SMELL",
        "rule": "java:S1171",
        "status": "OPEN",
        "rule_details": {
            "name": "Only static class initializers should be used",
            "description": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-static-instance-initializer-blocks\">Static vs. Instance Initializer Block in Java</a> </li>\n</ul>\n<p>Non-static initializers should be refactored into standard constructors or field initializers when possible.</p>\n<p>In most cases, the use of constructors, overloaded constructors, or factory methods is preferable for initializing instance variables. These\napproaches provide more explicit and controlled initialization, separate concerns, allow for better error handling, and make the code easier to\nunderstand and maintain.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n    {\n      put(\"a\", \"b\");\n    }\n  }; // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using static initialization block:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using constructor:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  public MyClass() {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using Java 9 <code>Map.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>or using Guava <code>ImmutableMap.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = com.google.common.collect.ImmutableMap.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>Non-static initializers, also known as instance initializers, are blocks of code within a class that are executed when an instance of the class is\ncreated. They are executed when an object of the class is created just before the constructor is called. Non-static initializers are useful when you\nwant to perform some common initialization logic for all objects of a class. They allow you to initialize instance variables in a concise and\ncentralized manner, without having to repeat the same initialization code in each constructor.</p>\n<p>While non-static initializers may have some limited use cases, they are rarely used and can be confusing for most developers because they only run\nwhen new class instances are created.</p>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "58ed4cd1-1d30-4a6f-9c54-00ca93366163",
        "severity": "MAJOR",
        "message": "Rename field \"vets\"",
        "component": "spring-petclinic:src/main/java/org/springframework/samples/petclinic/vet/Vets.java",
        "line": 33,
        "type": "CODE_SMELL",
        "rule": "java:S1700",
        "status": "OPEN",
        "rule_details": {
            "name": "A field should not duplicate the name of its containing class",
            "description": "<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n<h3>Exceptions</h3>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    },
    {
        "key": "edfd827e-2e32-47bb-a652-2cbb05840302",
        "severity": "MAJOR",
        "message": "Add a private constructor to hide the implicit public one.",
        "component": "spring-petclinic:src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java",
        "line": 33,
        "type": "CODE_SMELL",
        "rule": "java:S1118",
        "status": "OPEN",
        "rule_details": {
            "name": "Utility classes should not have public constructors",
            "description": "<p>Whenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a\n\"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.</p>\n<h3>Exceptions</h3>\n<p>When a class contains <code>public static void main(String[] args)</code> method it is not considered as a utility class and will be ignored by\nthis rule.</p>\n<p>To prevent the class from being instantiated, you should define a non-public constructor. This will prevent the compiler from implicitly generating\na public parameterless constructor.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>",
            "rule_severity": "MAJOR",
            "rule_type": "CODE_SMELL",
            "rule_status": "READY"
        }
    }
]